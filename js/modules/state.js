import { reactive, ref, computed, watch } from 'vue';


export const route = ref('battle'); // ÈªòËÆ§Ë∑≥Âà∞ÊàòÊñóÈ°µ‰æø‰∫éÁúãÂ∏ÉÂ±Ä
export const monsters = ref([]);
export const abilities = ref([]);
export const pcs = ref([]);
export const actions = ref([]);
export const monsterGroups = ref([]);
export const monsterFilters = reactive({
    keyword: '',
    cr: '',
    types: []
});
export const monsterTypes = ref(['aberration', 'beast', 'celestial', 'construct', 'dragon', 'elemental', 'fey', 'fiend', 'giant', 'humanoid', 'monstrosity', 'ooze', 'plant', 'undead', 'goblinoid']);
export const damageTypes = ref(['ÈíùÂáª', 'Á©øÂà∫', 'Êñ©Âáª', 'ÁÅ´ÁÑ∞', 'ÂØíÂÜ∑', 'ÂäõÂú∫', 'ÊØíÁ¥†', 'ÈÖ∏ÊÄß', 'Èó™Áîµ', 'ÂøÉÁÅµ', 'ÂÖâËÄÄ', 'Ê≠ªÁÅµ', 'Èõ∑È∏£']);
export const conditionTypes = ref(['charmed', 'frightened', 'poisoned', 'prone', 'restrained', 'blinded']);
export const monsterTypeTranslations = {
    'aberration': 'ÂºÇÊÄ™',
    'beast': 'ÈáéÂÖΩ',
    'celestial': 'Â§©ÁïåÁîüÁâ©',
    'construct': 'ÊûÑË£Ö‰Ωì',
    'dragon': 'Èæô',
    'elemental': 'ÂÖÉÁ¥†',
    'fey': 'Á≤æÁ±ª',
    'fiend': 'ÈÇ™È≠î',
    'giant': 'Â∑®‰∫∫',
    'humanoid': '‰∫∫ÂΩ¢ÁîüÁâ©',
    'monstrosity': 'ÊÄ™ÂÖΩ',
    'ooze': 'Ê≥•ÊÄ™',
    'plant': 'Ê§çÁâ©',
    'undead': '‰∏çÊ≠ªÁîüÁâ©',
    'goblinoid': 'Á±ªÂì•Â∏ÉÊûó'
};
export const translateType = (t) => monsterTypeTranslations[t] || t;
export const crOptions = ref(['0', '0.125', '0.25', '0.5', ...Array.from({
    length: 30
}, (_, i) => (i + 1).toString())]);
export const battle = reactive({
    participants: [],
    currentIndex: 0,
    round: 1,
    dragIndex: null,
});
// Áä∂ÊÄÅ
export const statusCatalog = ref([{
    name: 'ÂÄíÂú∞ Prone',
    icon: 'üõå'
}, {
    name: 'ÊùüÁºö Restrained',
    icon: '‚õìÔ∏è'
}, {
    name: 'Ëá¥Áõ≤ Blinded',
    icon: 'üï∂Ô∏è'
}, {
    name: '‰∏≠ÊØí Poisoned',
    icon: '‚ò†Ô∏è'
}, {
    name: 'È≠ÖÊÉë Charmed',
    icon: 'üíû'
}, {
    name: 'ÊÅêÊÖå Frightened',
    icon: 'üò±'
},]);
watch(battle, (newState) => {
    localStorage.setItem('dnd-battle-state', JSON.stringify(newState));
}, { deep: true });
export const ui = reactive({
    actorViewer: {
        open: false,
        actor: null,
        isEditing: false, // Êñ∞Â¢ûÔºöÁºñËæëÁä∂ÊÄÅÊ†áÂøó
        draft: null,      // Êñ∞Â¢ûÔºöÁºñËæëÊó∂ÁöÑÊï∞ÊçÆËçâÁ®ø
    },
    monsterEditor: {
        open: false,
        mode: 'edit', // 'view' or 'edit'
    },
    abilityPool: {
        open: false,
        keyword: '',
        nested: false
    },
    imageCropper: {
        open: false,
        imageUrl: null,
        aspectRatio: 720 / 480, // Ê®°ÊÄÅÊ°ÜÂ§ßËá¥ÂÆΩÈ´òÊØî
    },
    avatarCropper: {
        open: false,
        imageUrl: null,
        aspectRatio: 1, // 1:1 for circular avatar
    },
    actionPool: {
        open: false,
        keyword: '',
        nested: false
    },
    actionsViewer: {
        open: false,
        draft: null,
        title: ''
    },
    saveCheck: {
        open: false,
        targetName: '',
        dc: 0,
        ability: '',
        callback: null
    },
    // Âú®ËøôÈáåÊ∑ªÂä†Êñ∞ÁöÑÂØπË±°
    saveOutcomePicker: {
        open: false,
        title: '',
        targets: [], // Â≠òÂÇ®ÁõÆÊ†áÂØπË±°
        action: null, // Â≠òÂÇ®Âä®‰ΩúËØ¶ÊÉÖ
        damages: [], // Â≠òÂÇ®Â∑≤Êé∑È™∞ÁöÑ‰º§ÂÆ≥ÁªìÊûú [{ amount: 15, type: 'ÁÅ´ÁÑ∞' }]
        outcomes: {} // Â≠òÂÇ®ÊØè‰∏™ÁõÆÊ†áÁöÑË±ÅÂÖçÁªìÊûú { targetUid: 'fail' | 'half' | 'zero' }
    },
    abilityEditor: {
        open: false,
        nested: false
    },
    pcEditor: {
        open: false,
        mode: 'edit',
    },
    activeEditor: null, // 'monster' or 'pc'
    actionEditor: {
        open: false,
        saveTarget: 'global',
        nested: false,
    },
    statusPicker: {
        open: false,
        targetUid: null,
        selectedName: 'ÊùüÁºö Restrained',
        rounds: 3,
        icon: '‚õìÔ∏è'
    },
    addParticipants: {
        open: false,
        keywordM: '',
        keywordP: ''
    },
    hpEditor: {
        open: false,
        targetUid: null,
        delta: null
    },
    monsterGroupManager: { open: false },
    monsterGroupEditor: { open: false, keyword: '' },
    quickDamage: {
        open: false,
        targetUid: null,
        damageAmount: null,
        targetName: ''
    },
    actionOnCooldown: false,
    selectedAction: null,
    rollMode: 'normal',
    autoApplyDamage: true,
    selectedTargets: [],
    log: '',
    isEditingInitiative: false, // Êñ∞Â¢û: Áî®‰∫éÂàáÊç¢ÂÖàÊîªÂ∫èÂàóÁöÑÊü•Áúã/ÁºñËæëÊ®°Âºè
    notificationQueue: [],
    critNotification: {
        open: false,
        type: 'success', // 'success' or 'failure'
        attacker: '',
        target: '',
        toHitRoll: '',
        toHitResult: 0,
        targetAC: 0,
        damages: [], // Â≠òÂÇ®ÊØèÊÆµ‰º§ÂÆ≥ÁöÑËØ¶ÊÉÖÂØπË±° { rawAmount, finalAmount, type, modifier }
        totalFinalDamage: 0, // Â≠òÂÇ®ÊâÄÊúâ‰º§ÂÆ≥ÊÆµËêΩÁöÑÊúÄÁªàÊÄªÂíå
    },
    normalHitNotification: {
        open: false,
        attacker: '',
        target: '',
        toHitRoll: '',
        toHitResult: 0,
        targetAC: 0,
        damages: [], // Â≠òÂÇ®ÊØèÊÆµ‰º§ÂÆ≥ÁöÑËØ¶ÊÉÖÂØπË±° { rawAmount, finalAmount, type, modifier }
        totalFinalDamage: 0, // Â≠òÂÇ®ÊâÄÊúâ‰º§ÂÆ≥ÊÆµËêΩÁöÑÊúÄÁªàÊÄªÂíå
    },
    missNotification: {
        open: false,
        attacker: '',
        target: '',
        toHitRoll: '',
        toHitResult: 0,
        targetAC: 0,
    },
    quickDice: {
        inputOpen: false,
        resultOpen: false,
        expression: '',
        result: null
    },
    toasts: [],
});
export const hpDelta = ref(5);
export const quickDamageInput = ref(null);
export const quickRollInput = ref(null);
export const participantTiles = ref(new Map());
export const currentActor = computed(() => battle.participants[battle.currentIndex] || null);
export const sortedCurrentActorActions = computed(() => []);
export const sortedActorViewerActions = computed(() => []);
export const sortedMonsterDraftActions = computed(() => []);
export const sortedPcDraftActions = computed(() => []);

// ÊÄ™Áâ©ÁºñËæëÂô®ËçâÁ®ø
export const emptyMonster = () => ({
    name: '',
    avatar: '',
    cr: 1,
    backgroundImage: '',
    type: [],
    ac: 12,
    hp: {
        average: 10,
        roll: '1d8+2'
    },
    speed: {
        walk: 30
    },
    abilities: {
        str: 10,
        dex: 10,
        con: 10,
        int: 10,
        wis: 10,
        cha: 10
    },
    resistances: { damage: [], conditions: [] },
    vulnerabilities: { damage: [], conditions: [] },
    immunities: { damage: [], conditions: [] },
    actions: [],
    isDefault: false
});
export const emptyGroup = () => ({
    name: '',
    monsters: []
});
export const uiState = reactive({
    monsterDraft: emptyMonster(),
    targetCR: null,
    abilityDraft: {
        name: '',
        description: ''
    },
    pcDraft: {
        name: '',
        ac: 14,
        hpMax: 20,
        hpCurrent: 20,
        abilities: {
            str: 10,
            dex: 10,
            con: 10,
            int: 10,
            wis: 10,
            cha: 10
        },
        actions: []
    },
    actionDraft: { name: '', type: 'attack', damages: [], recharge: 0 },
    groupDraft: {
        name: '',
        monsters: [] // Ê†ºÂºè: [{ monsterId: number, name: string, count: number }]
    },
});